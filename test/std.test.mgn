// libstd tests

std := import('std')
fmt := import('fmt')

fn run(t) {
	// default
	{
		default := std.default

		'default given ?' |> t.eq(default(?, :fallback), :fallback)
		'default given 0' |> t.eq(default(0, :fallback), 0)
		'default given false' |> t.eq(default(false, :fallback), false)
		'default given normal value' |> t.eq(default(10, :fallback), 10)
	}

	// clamp and slice
	{
		{
			clamp: clamp
			slice: slice
		} := std

		'clamp(min, max)' |> t.eq(clamp(0, 10, 0, 10), [0, 10])
		'clamp(< min, > max)' |> t.eq(clamp(0, 10, -5, 12), [0, 10])
		'clamp(> min, < max)' |> t.eq(clamp(0, 10, 3, 7), [3, 7])
		'clamp(< min, < min)' |> t.eq(clamp(0, 10, -8, -2), [0, 0])

		'clamp(min, max) reversed arg' |> t.eq(clamp(0, 10, 10, 0), [0, 0])
		'clamp(< min, > max) reversed arg' |> t.eq(clamp(0, 10, 12, -5), [0, 0])
		'clamp(> min, < max) reversed arg' |> t.eq(clamp(0, 10, 7, 3), [3, 3])
		'clamp(< min, < min) reversed arg' |> t.eq(clamp(0, 10, -2, -8), [0, 0])

		// slice list

		'slice() empty list' |> t.eq(slice([]), [])
		'slice(start) empty list' |> t.eq(slice([], 1), [])
		'slice(start, end) empty list' |> t.eq(slice([], 1, 10), [])

		'slice() list' |> t.eq(slice([:a, :b, :c]), [:a, :b, :c])
		'slice(start) list' |> t.eq(slice([:a, :b, :c], 1), [:b, :c])
		'slice(start, end) list' |> t.eq(slice([:a, :b, :c, :d, :e], 1, 3), [:b, :c])
		'slice(start, > end) list' |> t.eq(slice([:a, :b, :c, :d, :e], 1, 10), [:b, :c, :d, :e])

		'slice() clones original list' |> t.eq(
			{
				original := [1, 2, 3]
				new := slice(original) << 100
				[original, new]
			}
			[
				[1, 2, 3]
				[1, 2, 3, 100]
			]
		)

		'slice() empty string' |> t.eq(slice(''), '')
		'slice(start) empty string' |> t.eq(slice('', 1), '')
		'slice(start, end) empty string' |> t.eq(slice('', 1, 10), '')

		'slice() string' |> t.eq(slice('abc'), 'abc')
		'slice(start) string' |> t.eq(slice('abc', 1), 'bc')
		'slice(start, end) string' |> t.eq(slice('abcde', 1, 3), 'bc')
		'slice(start, > end) string' |> t.eq(slice('abcde', 1, 10), 'bcde')

		'slice() clones original string' |> t.eq(
			{
				original := '12345'
				new := slice(original) << '100'
				[original, new]
			}
			['12345', '12345100']
		)
	}

	// clone
	{
		{ clone: clone } := std

		'clone() clones original string' |> t.eq(
			{
				original := '12345'
				new := clone(original) << '100'
				[original, new]
			}
			['12345', '12345100']
		)
		'clone() clones original list' |> t.eq(
			{
				original := [1, 2, 3]
				new := clone(original) << 100
				[original, new]
			}
			[
				[1, 2, 3]
				[1, 2, 3, 100]
			]
		)
		'clone() clones original object' |> t.eq(
			{
				original := { a: :ay, b: 'bee' }
				new := clone(original)
				new.c := :see
				[original, new]
			}
			[
				{ a: :ay, b: 'bee' }
				{ a: :ay, b: 'bee', c: :see }
			]
		)
	}

	// {to, from}Hex conversions
	{
		{
			toHex: toHex
			fromHex: fromHex

			each: each
		} := std

		'0 to hex' |> t.eq(toHex(0), '0')
		'42 to hex' |> t.eq(toHex(66), '42')
		'256 to hex' |> t.eq(toHex(256), '100')
		'1998 to hex' |> t.eq(toHex(1998), '7ce')
		'3141592 to hex' |> t.eq(toHex(3141592), '2fefd8')
		'fff from hex' |> t.eq(fromHex('fff'), 4095)
		'a2 from hex' |> t.eq(fromHex('a2'), 162)

		// toHex should truncate non-integer inputs
		'hex of fractional number, I' |> t.eq(
			toHex(16.8)
			'10'
		)
		'hex of fractional number, II' |> t.eq(
			toHex(1998.123)
			'7ce'
		)

		// round-trippability
		[
			0
			390420
			9230423903
			201900123
			'0'
			'aabbef'
			'fffab123'
			'ab99ff33'
		] |> each(fn(v) {
			name := fmt.format('round-trip {{ 0 }}', v)
			if type(v) {
				:int -> name |> t.eq(fromHex(toHex(v)), v)
				_ -> name |> t.eq(toHex(fromHex(v)), v)
			}
		})
	}

	// append and join
	{
		{
			append: append
			join: join
		} := std

		'append to empty list' |> t.eq(
			append([], [:a, :b, :c])
			[:a, :b, :c]
		)
		'append to list' |> t.eq(
			append([:a, :b], [:c, :d])
			[:a, :b, :c, :d]
		)
		'apped mutates original list' |> t.eq(
			{
				original := [1, 2, 3]
				append(original, [10, 20])
				original
			}
			[1, 2, 3, 10, 20]
		)

		'join to empty list' |> t.eq(
			join([], [:a, :b, :c])
			[:a, :b, :c]
		)
		'join to list' |> t.eq(
			join([:a, :b], [:c, :d])
			[:a, :b, :c, :d]
		)
		'join does not mutate original list' |> t.eq(
			{
				original := [1, 2, 3]
				join(original, [10, 20])
				original
			}
			[1, 2, 3]
		)
	}

	// range
	{
		range := std.range

		'range(end)' |> t.eq(range(5), [0, 1, 2, 3, 4])
		'range(end = 0)' |> t.eq(range(0), [])
		'range(start = 0, end)' |> t.eq(range(0, 5), [0, 1, 2, 3, 4])
		'range(start > 0, end)' |> t.eq(range(3, 6), [3, 4, 5])
		'range(start, end) < 0' |> t.eq(range(-10, -5), [-10, -9, -8, -7, -6])
		'range(start > end)' |> t.eq(range(10, 0), [])

		'range(start, end, step)' |> t.eq(range(4, 10, 2), [4, 6, 8])
		'range(start, end, step < 0)' |> t.eq(range(4, 10, -2), [])
		'range(start > end, step < 0)' |> t.eq(range(10, -4, -2), [10, 8, 6, 4, 2, 0, -2])

		'range(start, end, step) with off-step end' |> t.eq(range(2, 10, 3), [2, 5, 8])
	}

	// array functions -- reverse, map, each, filter, reduce, flatten, some, every
	{
		{
			clone: clone

			reverse: reverse
			map: map
			each: each
			filter: filter
			reduce: reduce
			flatten: flatten
			some: some
			every: every
		} := std

		arr := [1, 2, 3, 4, 10]

		fn ensureDoesNotMutate(name, f, list) {
			list := std.default(list, arr)
			fmt.format('{{ 0 }} does not mutate list arg', name) |> t.eq(
				{
					orig := clone(list)
					new := f(orig) << :invalid
					orig
				}
				list
			)
		}

		fn double(x) 2 * x
		fn even?(n) n % 2 = 0
		fn add(a, b) a + b
		fn isX?(c) c = 'X' | c = 'x'
		fn index(_, i) i

		ensureDoesNotMutate('reverse()', reverse)
		ensureDoesNotMutate('map(f)', fn(xs) map(xs, double))
		ensureDoesNotMutate('filter(f)', fn(xs) filter(xs, even?))
		ensureDoesNotMutate('flatten(f)', flatten, [[1, 2], [10, 20]])

		// reverse
		'reverse() empty list' |> t.eq(reverse([]), [])
		'reverse() len(1) list' |> t.eq(reverse([10]), [10])
		'reverse() len(n) list' |> t.eq(reverse([10, 20, 30, 40]), [40, 30, 20, 10])

		'map() empty list' |> t.eq(map([], double), [])
		'map() list' |> t.eq(map(arr, double), [2, 4, 6, 8, 20])
		'map() callback gets index' |> t.eq(map(arr, index), [0, 1, 2, 3, 4])

		'map() empty string' |> t.eq(map('', fn(c) c + ' '), '')
		'map() string' |> t.eq(map('abc', fn(c) c + ' '), 'a b c ')

		'each() empty list' |> t.eq(
			{
				toggle := false
				each([], fn { toggle <- true })
				toggle
			}
			false
		)
		'each() list' |> t.eq(
			{
				nums := []
				each(arr, fn(n) nums << n)
				nums
			}
			[1, 2, 3, 4, 10]
		)
		'each() callback gets index' |> t.eq(
			{
				nums := []
				each(arr, fn(_, i) { nums << i })
				nums
			}
			[0, 1, 2, 3, 4]
		)

		'filter() empty list' |> t.eq(filter([], even?), [])
		'filter() list' |> t.eq(filter(arr, even?), [2, 4, 10])
		'filter() callback gets index' |> t.eq(
			{
				nums := []
				filter(arr, fn(_, i) {
					nums << i
					true
				})
				nums
			}
			[0, 1, 2, 3, 4]
		)

		'filter() empty string' |> t.eq(filter('', isX?), '')
		'filter() string' |> t.eq(filter('axbCXingx', isX?), 'xXx')

		'reduce() empty list' |> t.eq(reduce([], 0, add), 0)
		'reduce() list' |> t.eq(reduce(arr, 0, add), 20)
		'reduce() callback gets index' |> t.eq(
			{
				nums := []
				reduce(arr, 0, fn(_, _, i) {
					nums << i
					0
				})
				nums
			}
			[0, 1, 2, 3, 4]
		)

		'flatten() empty list' |> t.eq(flatten([]), [])
		'flatten() list' |> t.eq(flatten([arr, arr]), [1, 2, 3, 4, 10, 1, 2, 3, 4, 10])
		'flatten() only flattens 1 depth' |> t.eq(
			flatten([[1, 2], [[3, 4], [5, 6]]])
			[1, 2, [3, 4], [5, 6]]
		)

		'some() empty list' |> t.eq(some([]), false)
		'some() list' |> t.eq(some([true, false]), true)
		'some() empty list w/ pred' |> t.eq(some([], even?), false)
		'some() list w/ pred' |> t.eq(some([1, 3, 5], even?), false)
		'some() list w/ pred' |> t.eq(some(arr, even?), true)
		'some() string -> true' |> t.eq(some('xxXxxi', isX?), true)
		'some() string -> false' |> t.eq(some('iiiiiiaa', isX?), false)

		'every() empty list' |> t.eq(every([]), true)
		'every() list' |> t.eq(every([true, false]), false)
		'every() empty list w/ pred' |> t.eq(every([], even?), true)
		'every() list w/ pred' |> t.eq(every(arr, even?), false)
		'every() list w/ pred' |> t.eq(every(arr |> filter(even?), even?), true)
		'every() string' |> t.eq(every('xxXxx', isX?), true)
		'every() string' |> t.eq(every('xxXxxi', isX?), false)
	}

	// indexOf and contains?
	{
		{
			indexOf: indexOf
			contains?: contains?
		} := std

		'indexOf empty list' |> t.eq(indexOf([], :a), -1)
		'indexOf nonexistent item' |> t.eq(indexOf([:a, :b, :c], :x), -1)
		'indexOf existent item' |> t.eq(indexOf([:a, :b, :c], :b), 1)
		'indexOf duplicate item' |> t.eq(indexOf([:a, :b, :c, :d, :c], :c), 2)

		'contains? empty list' |> t.eq(contains?([], :a), false)
		'contains? nonexistent item' |> t.eq(contains?([:a, :b, :c], :x), false)
		'contains? existent item' |> t.eq(contains?([:a, :b, :c], :b), true)
		'contains? duplicate item' |> t.eq(contains?([:a, :b, :c, :d, :c], :c), true)
	}
}

