// libsyntax tests

std := import('std')
{
	Tokenizer: Tokenizer
	Parser: Parser
} := import('../lib/syntax')

fn run(t) {
	// tokenizer tests
	{
		fn tokenize(s) Tokenizer(s).tokenize()

		fn Token(type, pos, val) {
			type: type
			val: val
			pos: pos
		}

		'empty program' |> t.eq(
			tokenize('')
			[]
		)

		'comment program' |> t.eq(
			tokenize('// this is a comment\n//second comment')
			[
				Token(:comment, [1, 1], 'this is a comment')
				Token(:newline, [1, 20])
				Token(:comment, [2, 1], 'second comment')
			]
		)

		'whitespace-only program' |> t.eq(
			tokenize('   \n')
			[
				Token(:newline, [1, 3])
			]
		)

		'number literals' |> t.eq(
			tokenize(' 0 1 2.34 -0.567')
			[
				Token(:numberLiteral, [1, 2], '0')
				Token(:numberLiteral, [1, 4], '1')
				Token(:numberLiteral, [1, 6], '2.34')
				Token(:minus, [1, 11])
				Token(:numberLiteral, [1, 12], '0.567')
				Token(:comma, [1, 16])
			]
		)

		'string literals' |> t.eq(
			tokenize('\'hello\' \'hi\' \'what\\\'s up\\n\\t\' ')
			[
				Token(:stringLiteral, [1, 1], 'hello')
				Token(:stringLiteral, [1, 9], 'hi')
				Token(:stringLiteral, [1, 14], 'what\'s up\n\t')
				Token(:comma, [1, 30])
			]
		)

		'identifiers' |> t.eq(
			tokenize('hi _hello? whats_up__ nothing! ')
			[
				Token(:identifier, [1, 1], 'hi')
				Token(:identifier, [1, 4], '_hello?')
				Token(:identifier, [1, 12], 'whats_up__')
				Token(:identifier, [1, 23], 'nothing!')
				Token(:comma, [1, 31])
			]
		)

		'simple binary expression' |> t.eq(
			tokenize('total := 1 + 2 * 4')
			[
				Token(:identifier, [1, 1], 'total')
				Token(:assign, [1, 7])
				Token(:numberLiteral, [1, 10], '1')
				Token(:plus, [1, 12])
				Token(:numberLiteral, [1, 14], '2')
				Token(:times, [1, 16])
				Token(:numberLiteral, [1, 18], '4')
				Token(:comma, [1, 18])
			]
		)

		'delimiters' |> t.eq(
			tokenize('( [{ hi: :hello }] ) + (2)')
			[
				Token(:leftParen, [1, 1])
				Token(:leftBracket, [1, 3])
				Token(:leftBrace, [1, 4])
				Token(:identifier, [1, 6], 'hi')
				Token(:colon, [1, 8])
				Token(:colon, [1, 10])
				Token(:identifier, [1, 11], 'hello')
				Token(:comma, [1, 17])
				Token(:rightBrace, [1, 17])
				Token(:comma, [1, 18])
				Token(:rightBracket, [1, 18])
				Token(:comma, [1, 20])
				Token(:rightParen, [1, 20])
				Token(:plus, [1, 22])
				Token(:leftParen, [1, 24])
				Token(:numberLiteral, [1, 25], '2')
				Token(:comma, [1, 26])
				Token(:rightParen, [1, 26])
				Token(:comma, [1, 26])
			]
		)

		'list literal' |> t.eq(
			tokenize('[1, a, :first]')
			[
				Token(:leftBracket, [1, 1])
				Token(:numberLiteral, [1, 2], '1')
				Token(:comma, [1, 3])
				Token(:identifier, [1, 5], 'a')
				Token(:comma, [1, 6])
				Token(:colon, [1, 8])
				Token(:identifier, [1, 9], 'first')
				Token(:comma, [1, 14])
				Token(:rightBracket, [1, 14])
				Token(:comma, [1, 14])
			]
		)

		'list literal with newlines' |> t.eq(
			tokenize('[\n\t1,\n\ta,\n\t:first\n]')
			[
				Token(:leftBracket, [1, 1])
				Token(:newline, [1, 1])
				Token(:numberLiteral, [2, 2], '1')
				Token(:comma, [2, 3])
				Token(:newline, [2, 3])
				Token(:identifier, [3, 2], 'a')
				Token(:comma, [3, 3])
				Token(:newline, [3, 3])
				Token(:colon, [4, 2])
				Token(:identifier, [4, 3], 'first')
				Token(:comma, [4, 0])
				Token(:newline, [4, 0])
				Token(:rightBracket, [5, 1])
				Token(:comma, [5, 1])
			]
		)

		'object literal' |> t.eq(
			tokenize('{a: :bee}')
			[
				Token(:leftBrace, [1, 1])
				Token(:identifier, [1, 2], 'a')
				Token(:colon, [1, 3])
				Token(:colon, [1, 5])
				Token(:identifier, [1, 6], 'bee')
				Token(:comma, [1, 9])
				Token(:rightBrace, [1, 9])
				Token(:comma, [1, 9])
			]
		)

		'object literal with newlines' |> t.eq(
			tokenize('{\n1: 2\n3: ?\n}')
			[
				Token(:leftBrace, [1, 1])
				Token(:newline, [1, 1])
				Token(:numberLiteral, [2, 1], '1')
				Token(:colon, [2, 2])
				Token(:numberLiteral, [2, 4], '2')
				Token(:comma, [2, 0])
				Token(:newline, [2, 0])
				Token(:numberLiteral, [3, 1], '3')
				Token(:colon, [3, 2])
				Token(:qmark, [3, 4])
				Token(:comma, [3, 4])
				Token(:newline, [3, 4])
				Token(:rightBrace, [4, 1])
				Token(:comma, [4, 1])
			]
		)

		'basic function' |> t.eq(
			tokenize('fn a(b, c) if a |> c {\nd -> e\n}')
			[
				Token(:fnKeyword, [1, 1])
				Token(:identifier, [1, 4], 'a')
				Token(:leftParen, [1, 5])
				Token(:identifier, [1, 6], 'b')
				Token(:comma, [1, 7])
				Token(:identifier, [1, 9], 'c')
				Token(:comma, [1, 10])
				Token(:rightParen, [1, 10])
				Token(:ifKeyword, [1, 12])
				Token(:identifier, [1, 15], 'a')
				Token(:pipeArrow, [1, 17])
				Token(:identifier, [1, 20], 'c')
				Token(:leftBrace, [1, 22])
				Token(:newline, [1, 22])
				Token(:identifier, [2, 1], 'd')
				Token(:branchArrow, [2, 3])
				Token(:identifier, [2, 6], 'e')
				Token(:comma, [2, 0])
				Token(:newline, [2, 0])
				Token(:rightBrace, [3, 1])
				Token(:comma, [3, 1])
			]
		)

		'variadic function' |> t.eq(
			tokenize('fn f(x, y...) ?, f(1, a...)')
			[
				Token(:fnKeyword, [1, 1])
				Token(:identifier, [1, 4], 'f')
				Token(:leftParen, [1, 5])
				Token(:identifier, [1, 6], 'x')
				Token(:comma, [1, 7])
				Token(:identifier, [1, 9], 'y')
				Token(:ellipsis, [1, 10])
				Token(:comma, [1, 13])
				Token(:rightParen, [1, 13])
				Token(:qmark, [1, 15])
				Token(:comma, [1, 16])
				Token(:identifier, [1, 18], 'f')
				Token(:leftParen, [1, 19])
				Token(:numberLiteral, [1, 20], '1')
				Token(:comma, [1, 21])
				Token(:identifier, [1, 23], 'a')
				Token(:ellipsis, [1, 24])
				Token(:comma, [1, 27])
				Token(:rightParen, [1, 27])
				Token(:comma, [1, 27])
			]
		)
	}

	// parser tests
	{
		fn parse(s) {
			tokens := Tokenizer(s).tokenize()
			Parser(tokens).parse()
		}

		// for positions
		fn at(line, col) {
			type: _
			val: _
			pos: [line, col]
		}

		'empty program' |> t.eq(
			parse('')
			[]
		)

		'comment program' |> t.eq(
			parse('// this is a comment\n//second comment')
			[]
		)

		'whitespace-only program' |> t.eq(
			parse('   \n')
			[]
		)

		'number literals' |> t.eq(
			parse('12, 24.5, 0')
			[
				{ type: :number, int?: true, val: 12, tok: at(1, 1) }
				{ type: :number, int?: false, val: 24.5, tok: at(1, 5) }
				{ type: :number, int?: true, val: 0, tok: at(1, 11) }
			]
		)

		'string literals' |> t.eq(
			parse('\'hello\', \'hi\', \'what\\\'s up\\n\\t\' ')
			[
				{ type: :string, val: 'hello', tok: at(1, 1) }
				{ type: :string, val: 'hi', tok: at(1, 10) }
				{ type: :string, val: 'what\'s up\n\t', tok: at(1, 16) }
			]
		)

		'identifiers' |> t.eq(
			parse('hi, _hello?, whats_up__, nothing! ')
			[
				{ type: :identifier, val: 'hi', tok: at(1, 1) }
				{ type: :identifier, val: '_hello?', tok: at(1, 5) }
				{ type: :identifier, val: 'whats_up__', tok: at(1, 14) }
				{ type: :identifier, val: 'nothing!', tok: at(1, 26) }
			]
		)

		'simple binary expressions' |> t.eq(
			parse('10 + 20')
			[{
				type: :binary
				op: :plus
				left: { type: :number, val: 10, int?: true, tok: at(1, 1) }
				right: { type: :number, val: 20, int?: true, tok: at(1, 6) }
				tok: at(1, 4)
			}]
		)

		'simple assignment' |> t.eq(
			parse('x <- :hi')
			[{
				type: :assignment
				tok: at(1, 3)
				local?: false
				left: { type: :identifier, val: 'x', tok: at(1, 1) }
				right: { type: :atom, val: 'hi', tok: at(1, 6) }
			}]
		)

		'compound binary expressions' |> t.eq(
			parse('total := 1 + 2 * 3 - 4')
			[{
				type: :assignment
				tok: at(1, 7)
				local?: true
				left: { type: :identifier, val: 'total', tok: at(1, 1) }
				right: {
					type: :binary
					tok: at(1, 20)
					op: :minus
					left: {
						type: :binary
						tok: at(1, 12)
						op: :plus
						left: {
							type: :number
							tok: at(1, 10)
							int?: true
							val: 1
						}
						right: {
							type: :binary
							tok: at(1, 16)
							op: :times
							left: {
								type: :number
								tok: at(1, 14)
								int?: true
								val: 2
							}
							right: {
								type: :number
								tok: at(1, 18)
								int?: true
								val: 3
							}
						}
					}
					right: {
						type: :number
						tok: at(1, 22)
						int?: true
						val: 4
					}
				}
			}]
		)

		'list literals' |> t.eq(
			parse('[], [1, [2, 3]]')
			[{
				type: :list
				tok: at(1, 1)
				elems: []
			}, {
				type: :list
				tok: at(1, 5)
				elems: [{
					type: :number
					tok: at(1, 6)
					int?: true
					val: 1
				}, {
					type: :list
					tok: at(1, 9)
					elems: [{
						type: :number
						tok: at(1, 10)
						int?: true
						val: 2
					}, {
						type: :number
						tok: at(1, 13)
						int?: true
						val: 3
					}]
				}]
			}]
		)

		'object literals' |> t.eq(
			parse('{}, {a: :ay, b + [c]: {d: \'dee\'}}')
			[{
				type: :object
				tok: at(1, 1)
				entries: []
			}, {
				type: :object
				tok: at(1, 5)
				entries: [{
					key: { type: :identifier, tok: at(1, 6), val: 'a' }
					val: { type: :atom, tok: at(1, 9), val: 'ay'}
				}, {
					key: {
						type: :binary
						tok: at(1, 16)
						op: :plus
						left: { type: :identifier, tok: at(1, 14), val: 'b' }
						right: {
							type: :list
							tok: at(1, 18)
							elems: [{
								type: :identifier
								tok: at(1, 19)
								val: 'c'
							}]
						}
					}
					val: {
						type: :object
						tok: at(1, 23)
						entries: [{
							key: { type: :identifier, tok: at(1, 24), val: 'd' }
							val: { type: :string, tok: at(1, 27), val: 'dee' }
						}]
					}
				}]
			}]
		)

		'empty fn body edge case' |> t.eq(
			parse('fn {}\nfn named(){  }')
			[{
				type: :function
				tok: at(1, 1)
				name: ''
				args: []
				restArg: ''
				body: { type: :block, tok: at(1, 4), exprs: [] }
			}, {
				type: :function
				tok: at(2, 1)
				name: 'named'
				args: []
				restArg: ''
				body: { type: :block, tok: at(2, 11), exprs: [] }
			}]
		)

		'fn def and call' |> t.eq(
			parse('fn get3 { x := 4, 3 }\nget3(1, 2, []...)')
			[{
				type: :function
				tok: at(1, 1)
				name: 'get3'
				args: []
				restArg: ''
				body: {
					type: :block
					tok: at(1, 9)
					exprs: [{
						type: :assignment
						tok: at(1, 13)
						local?: true
						left: { type: :identifier, tok: at(1, 11), val: 'x' }
						right: { type: :number, tok: at(1, 16), int?: true, val: 4 }
					}, {
						type: :number
						tok: at(1, 19)
						int?: true
						val: 3
					}]
				}
			}, {
				type: :fnCall
				tok: at(2, 5)
				function: {
					type: :identifier
					tok: at(2, 1)
					val: 'get3'
				}
				args: [{
					type: :number
					tok: at(2, 6)
					int?: true
					val: 1
				}, {
					type: :number
					tok: at(2, 9)
					int?: true
					val: 2
				}]
				restArg: {
					type: :list
					tok: at(2, 12)
					elems: []
				}
			}]
		)

		'if expression' |> t.eq(
			parse('if 1 + 2 {
				3 + 4 -> 5
				f() -> 10
				_ -> ?
			}')
			[{
				type: :ifExpr
				tok: at(1, 1)
				cond: {
					type: :binary
					tok: at(1, 6)
					op: :plus
					left: {
						type: :number
						tok: at(1, 4)
						int?: true
						val: 1
					}
					right: {
						type: :number
						tok: at(1, 8)
						int?: true
						val: 2
					}
				}
				branches: [
					[{
						type: :ifBranch
						target: {
							type: :binary
							tok: at(2, 7)
							op: :plus
							left: {
								type: :number
								tok: at(2, 5)
								int?: true
								val: 3
							}
							right: {
								type: :number
								tok: at(2, 9)
								int?: true
								val: 4
							}
						}
						body: {
							type: :number
							tok: at(2, 14)
							int?: true
							val: 5
						}
					}]
					[{
						type: :ifBranch
						target: {
							type: :fnCall
							tok: at(3, 6)
							function: {
								type: :identifier
								tok: at(3, 5)
								val: 'f'
							}
							args: []
							restArg: ?
						}
						body: {
							type: :number
							tok: at(3, 12)
							int?: true
							val: 10
						}
					}]
					[{
						type: :ifBranch
						target: {
							type: :empty
							tok: at(4, 5)
						}
						body: {
							type: :null
							tok: at(4, 10)
						}
					}]
				]
			}]
		)

		// TODO: with, rest args in fn def, pipe
	}
}

