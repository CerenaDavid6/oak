std := import('std')
fmt := import('fmt')

fn run(t) {
	// core language behavior tests
	//
	// For the native Oak interpreter, these test cases are included in the Go
	// test suite, in eval_test.go. However, they are included here for (1)
	// completeness's sake when this test is run by itself, and (2) more
	// importantly, so that we get coverage for the more fragile of these tests
	// when built with `oak build --web`.
	{
		'\\x??-escaped strings' |> t.eq(
			['\x', 'a\x!', 'a\x1!', 'a\x0a!', 'a\x0A!', 'a\x1z!']
			['x', 'ax!', 'ax1!', 'a\n!', 'a\n!', 'ax1z!']
		)

		'object literal' |> t.eq(
			{ a: 'ay', 'b': 200, 100: { d: :dee } }
			{ 'a': 'ay', 'b': 200, '100': { d: :dee } }
		)

		'list stringify' |> t.eq(
			[
				string(:atomValue)
				string(3)
				string(2.51)
			]
			['atomValue', '3', '2.51']
		)

		'function def and call' |> t.eq(
			{
				fn getThree() { x := 4, 3 }
				getThree()
			}
			3
		)

		'function def with empty' |> t.eq(
			{
				fn getThird(_, _, third) third
				getThird(1, 2, 3)
			}
			3
		)

		'function creates scope' |> t.eq(
			{
				x := 3
				fn defineX x := 10
				defineX()
				x
			}
			3
		)

		'block creates scope' |> t.eq(
			{
				x := 3
				{ x := 10 }
				x
			}
			3
		)

		'empty function body' |> t.eq(
			{
				fn do {
					a: :bee
				}
				do()
			}
			{ a: :bee }
		)

		'object literal function body' |> t.eq(
			{
				fn do {}
				do()
			}
			?
		)

		'destructure list' |> t.eq(
			{
				list := [1, 2, 3]
				[a] := list
				[_, _, b, c] := list
				[a, b, c]
			}
			[1, 3, ?]
		)

		'destructure object' |> t.eq(
			{
				list := [1, 2, 3]
				obj := { a: 'ay', b: 'bee' }
				{ a: a } := obj
				{ b: b, c: see } := obj
				[a, b, see]
			}
			['ay', 'bee', ?]
		)

		'destructure to reassign list' |> t.eq(
			{
				v := [:aa, :bbb]
				[v, w] := v
				v
			}
			:aa
		)

		'destructure to reassign object' |> t.eq(
			{
				a := { a: :aa, b: :bbb }
				{ a: a } := a
				a
			}
			:aa
		)

		'undescore var names' |> t.eq(
			{
				_a := 'A'
				b_ := 'B'
				c_d := 'CD'
				_a + b_ + c_d
			}
			'ABCD'
		)

		'nonlocal assignment' |> t.eq(
			{
				x := 100
				y := 200
				fn do {
					x <- x + 100
					y := y + 100
				}
				do()
				x + y
			}
			400
		)

		'push to string' |> t.eq(
			{
				s := 'hi'
				[s << 'world', s]
			}
			['hiworld', 'hiworld']
		)

		'push arrow precedence' |> t.eq(
			{
				arr := [2] << 1 + 3
				arr << 10 << 20
				arr << x := 100
			}
			[2, 4, 10, 20, 100]
		)

		'binary expr with complex terms' |> t.eq(
			{
				fn double(n) 2 * n
				fn decrement(n) n - 1
				double(10) + if decrement(10) { 9 -> 2, _ -> 1 } + 8
			}
			30
		)

		'and operator' |> t.eq(
			[
				true & true
				true & false
				false & true
				false & false
				'abcd' & '    '
				'    ' & 'wxyz'
				'abcdef' & '   '
				'   ' & 'abcdef'
			]
			[
				true, false, false, false
				'    ', '    ', '   \x00\x00\x00', '   \x00\x00\x00'
			]
		)

		'xor operator' |> t.eq(
			[
				true ^ true
				true ^ false
				false ^ true
				false ^ false
				'ABCD' ^ '    '
				'    ' ^ 'WXYZ'
				'ABCDEF' ^ '   '
				'   ' ^ 'ABCDEF'
			]
			[
				false, true, true, false
				'abcd', 'wxyz', 'abcDEF', 'abcDEF'
			]
		)

		'or operator' |> t.eq(
			[
				true | true
				true | false
				false | true
				false | false
				'ABCD' | '    '
				'    ' | 'WXYZ'
				'ABCDEF' | '   '
				'   ' | 'ABCDEF'
			]
			[
				true, true, true, false
				'abcd', 'wxyz', 'abcDEF', 'abcDEF'
			]
		)

		'if expr with multi target' |> t.eq(
			[11, 12, 13] |> with std.map() fn(i) if i {
				10 -> :wrong
				11, 5 + 7, { 10 + 3 } -> :right
				_ -> :wrong2
			}
			[:right, :right, :right]
		)

		'nested if expr' |> t.eq(
			if 3 {
				10, if true {
					true -> 10
					_ -> 3
				} -> 'hi'
				100, 3 -> 'hello'
			}
			'hello'
		)

		'complex if expr target' |> t.eq(
			{
				fn double(n) 2 * n
				fn xyz(n) if n {
					1 + 2 -> :abc
					2 * double(3) -> :xyz
					_ -> false
				}
				[xyz(3), xyz(12), xyz(24)]
			}
			[:abc, :xyz, false]
		)

		'recursive function on list' |> t.eq(
			{
				fn each(list, f) {
					fn sub(i) if i {
						len(list) -> ?
						_ -> {
							f(list.(i))
							sub(i + 1)
						}
					}
					sub(0)
				}

				sum := 0
				list := [1, 2, 3, 4, 5]
				with each(list) fn(it) {
					sum <- sum + it
				}
				sum
			}
			15
		)

		'string access' |> t.eq(
			{
				s := 'Hello, World!'
				[
					s.0 + s.2
					s.- 2
					s.15
				]
			}
			['Hl', ?, ?]
		)

		'string assign' |> t.eq(
			{
				s := {
					payload: 'Magnolia'
				}
				t := s.payload
				[s.payload.3 := 'pie', t]
			}
			['Magpieia', 'Magpieia']
		)

		'object delete' |> t.eq(
			{
				obj := {
					a: 'ay'
					b: 'bee'
					c: {
						d: 'dee'
						e: 'ee'
					}
				}
				[
					obj.c.d := _
					obj.c
				]
			}
			[{ e: 'ee' }, { e: 'ee' }]
		)

		'extra args' |> t.eq(
			{
				fn getExtra(a, b, c) {
					[b, c]
				}
				getExtra(1, ?)
			}
			[?, ?]
		)

		'rest args' |> t.eq(
			{
				fn getRest(first, rest...) {
					rest
				}
				getRest(1, 2, 3, 4, 5)
			}
			[2, 3, 4, 5]
		)
	}

	// default
	{
		default := std.default

		'default given ?' |> t.eq(default(?, :fallback), :fallback)
		'default given 0' |> t.eq(default(0, :fallback), 0)
		'default given false' |> t.eq(default(false, :fallback), false)
		'default given normal value' |> t.eq(default(10, :fallback), 10)
	}

	// clamp and slice
	{
		{
			clamp: clamp
			slice: slice
		} := std

		'clamp(min, max)' |> t.eq(clamp(0, 10, 0, 10), [0, 10])
		'clamp(< min, > max)' |> t.eq(clamp(0, 10, -5, 12), [0, 10])
		'clamp(> min, < max)' |> t.eq(clamp(0, 10, 3, 7), [3, 7])
		'clamp(< min, < min)' |> t.eq(clamp(0, 10, -8, -2), [0, 0])

		'clamp(min, max) reversed arg' |> t.eq(clamp(0, 10, 10, 0), [0, 0])
		'clamp(< min, > max) reversed arg' |> t.eq(clamp(0, 10, 12, -5), [0, 0])
		'clamp(> min, < max) reversed arg' |> t.eq(clamp(0, 10, 7, 3), [3, 3])
		'clamp(< min, < min) reversed arg' |> t.eq(clamp(0, 10, -2, -8), [0, 0])

		// slice list

		'slice() empty list' |> t.eq(slice([]), [])
		'slice(start) empty list' |> t.eq(slice([], 1), [])
		'slice(start, end) empty list' |> t.eq(slice([], 1, 10), [])

		'slice() list' |> t.eq(slice([:a, :b, :c]), [:a, :b, :c])
		'slice(start) list' |> t.eq(slice([:a, :b, :c], 1), [:b, :c])
		'slice(start, end) list' |> t.eq(slice([:a, :b, :c, :d, :e], 1, 3), [:b, :c])
		'slice(start, > end) list' |> t.eq(slice([:a, :b, :c, :d, :e], 1, 10), [:b, :c, :d, :e])

		'slice() clones original list' |> t.eq(
			{
				original := [1, 2, 3]
				new := slice(original) << 100
				[original, new]
			}
			[
				[1, 2, 3]
				[1, 2, 3, 100]
			]
		)

		'slice() empty string' |> t.eq(slice(''), '')
		'slice(start) empty string' |> t.eq(slice('', 1), '')
		'slice(start, end) empty string' |> t.eq(slice('', 1, 10), '')

		'slice() string' |> t.eq(slice('abc'), 'abc')
		'slice(start) string' |> t.eq(slice('abc', 1), 'bc')
		'slice(start, end) string' |> t.eq(slice('abcde', 1, 3), 'bc')
		'slice(start, > end) string' |> t.eq(slice('abcde', 1, 10), 'bcde')

		'slice() clones original string' |> t.eq(
			{
				original := '12345'
				new := slice(original) << '100'
				[original, new]
			}
			['12345', '12345100']
		)
	}

	// clone
	{
		{ clone: clone } := std

		'clone() clones original string' |> t.eq(
			{
				original := '12345'
				new := clone(original) << '100'
				[original, new]
			}
			['12345', '12345100']
		)
		'clone() clones original list' |> t.eq(
			{
				original := [1, 2, 3]
				new := clone(original) << 100
				[original, new]
			}
			[
				[1, 2, 3]
				[1, 2, 3, 100]
			]
		)
		'clone() clones original object' |> t.eq(
			{
				original := { a: :ay, b: 'bee' }
				new := clone(original)
				new.c := :see
				[original, new]
			}
			[
				{ a: :ay, b: 'bee' }
				{ a: :ay, b: 'bee', c: :see }
			]
		)
	}

	// {to, from}Hex conversions
	{
		{
			toHex: toHex
			fromHex: fromHex

			each: each
		} := std

		'0 to hex' |> t.eq(toHex(0), '0')
		'42 to hex' |> t.eq(toHex(66), '42')
		'256 to hex' |> t.eq(toHex(256), '100')
		'1998 to hex' |> t.eq(toHex(1998), '7ce')
		'3141592 to hex' |> t.eq(toHex(3141592), '2fefd8')
		'empty string from hex' |> t.eq(fromHex(''), 0)
		'fff from hex' |> t.eq(fromHex('fff'), 4095)
		'a2 from hex' |> t.eq(fromHex('a2'), 162)
		'ABC from hex' |> t.eq(fromHex('ABC'), 2748)

		// toHex should truncate non-integer inputs
		'hex of fractional number, I' |> t.eq(
			toHex(16.8)
			'10'
		)
		'hex of fractional number, II' |> t.eq(
			toHex(1998.123)
			'7ce'
		)

		// fromHex returns ? on invalid hex numbers
		[
			' '
			'xyz'
			'123_456'
			'12\nab'
		] |> with std.each() fn(invalid) {
			fmt.format('correctly errors on {{ 0 }}', invalid) |> t.eq(
				fromHex(invalid)
				?
			)
		}

		// round-trippability
		[
			0
			390420
			9230423903
			201900123
			'0'
			'aabbef'
			'fffab123'
			'ab99ff33'
		] |> each(fn(v) {
			name := fmt.format('round-trip {{ 0 }}', v)
			if type(v) {
				:int -> name |> t.eq(v |> toHex() |> fromHex(), v)
				_ -> name |> t.eq(v |> fromHex() |> toHex(), v)
			}
		})
	}

	// append and join
	{
		{
			append: append
			join: join
		} := std

		'append to empty list' |> t.eq(
			append([], [:a, :b, :c])
			[:a, :b, :c]
		)
		'append to list' |> t.eq(
			append([:a, :b], [:c, :d])
			[:a, :b, :c, :d]
		)
		'apped mutates original list' |> t.eq(
			{
				original := [1, 2, 3]
				append(original, [10, 20])
				original
			}
			[1, 2, 3, 10, 20]
		)

		'join to empty list' |> t.eq(
			join([], [:a, :b, :c])
			[:a, :b, :c]
		)
		'join to list' |> t.eq(
			join([:a, :b], [:c, :d])
			[:a, :b, :c, :d]
		)
		'join does not mutate original list' |> t.eq(
			{
				original := [1, 2, 3]
				join(original, [10, 20])
				original
			}
			[1, 2, 3]
		)
	}

	// range
	{
		range := std.range

		'range(end)' |> t.eq(range(5), [0, 1, 2, 3, 4])
		'range(end = 0)' |> t.eq(range(0), [])
		'range(start = 0, end)' |> t.eq(range(0, 5), [0, 1, 2, 3, 4])
		'range(start > 0, end)' |> t.eq(range(3, 6), [3, 4, 5])
		'range(start, end) < 0' |> t.eq(range(-10, -5), [-10, -9, -8, -7, -6])
		'range(start > end)' |> t.eq(range(10, 0), [])

		'range(start, end, step)' |> t.eq(range(4, 10, 2), [4, 6, 8])
		'range(start, end, step < 0)' |> t.eq(range(4, 10, -2), [])
		'range(start > end, step < 0)' |> t.eq(range(10, -4, -2), [10, 8, 6, 4, 2, 0, -2])

		'range(start, end, step) with off-step end' |> t.eq(range(2, 10, 3), [2, 5, 8])
	}

	// array functions -- reverse, map, each, filter, reduce, flatten, some,
	// every, zip, partition, uniq
	{
		{
			clone: clone

			reverse: reverse
			map: map
			each: each
			filter: filter
			reduce: reduce
			flatten: flatten
			some: some
			every: every
			zip: zip
			partition: partition
			uniq: uniq
		} := std

		arr := [1, 2, 3, 4, 10]

		fn ensureDoesNotMutate(name, f, list) {
			list := std.default(list, arr)
			fmt.format('{{ 0 }} does not mutate list arg', name) |> t.eq(
				{
					orig := clone(list)
					new := f(orig) << :invalid
					orig
				}
				list
			)
		}

		fn double(x) 2 * x
		fn even?(n) n % 2 = 0
		fn add(a, b) a + b
		fn isX?(c) c = 'X' | c = 'x'
		fn repeat(c) c << c
		fn upcase(c) char(codepoint(c) - 32)
		fn index(_, i) i

		ensureDoesNotMutate('reverse', reverse)
		ensureDoesNotMutate('map(f)', fn(xs) map(xs, double))
		ensureDoesNotMutate('filter(f)', fn(xs) filter(xs, even?))
		ensureDoesNotMutate('flatten(f)', flatten, [[1, 2], [10, 20]])

		'reverse empty string' |> t.eq(reverse(''), '')
		'reverse len(1) string' |> t.eq(reverse('A'), 'A')
		'reverse len(n) string' |> t.eq(reverse('hello world'), 'dlrow olleh')

		'reverse empty list' |> t.eq(reverse([]), [])
		'reverse len(1) list' |> t.eq(reverse([10]), [10])
		'reverse len(n) list' |> t.eq(reverse([10, 20, 30, 40]), [40, 30, 20, 10])

		'map empty string' |> t.eq(map('', upcase), '')
		'map string' |> t.eq('abc' |> map(repeat) |> map(upcase), 'AABBCC')

		'map empty list' |> t.eq(map([], double), [])
		'map list' |> t.eq(map(arr, double), [2, 4, 6, 8, 20])
		'map callback gets index' |> t.eq(map(arr, index), [0, 1, 2, 3, 4])

		'each empty list' |> t.eq(
			{
				toggle := false
				each([], fn { toggle <- true })
				toggle
			}
			false
		)
		'each list' |> t.eq(
			{
				nums := []
				each(arr, fn(n) nums << n)
				nums
			}
			[1, 2, 3, 4, 10]
		)
		'each callback gets index' |> t.eq(
			{
				nums := []
				each(arr, fn(_, i) { nums << i })
				nums
			}
			[0, 1, 2, 3, 4]
		)

		'filter empty string' |> t.eq(filter('', isX?), '')
		'filter string' |> t.eq(filter('axbCXingx', isX?), 'xXx')

		'filter empty list' |> t.eq(filter([], even?), [])
		'filter list' |> t.eq(filter(arr, even?), [2, 4, 10])
		'filter callback gets index' |> t.eq(
			{
				nums := []
				filter(arr, fn(_, i) {
					nums << i
					true
				})
				nums
			}
			[0, 1, 2, 3, 4]
		)

		'reduce empty list' |> t.eq(reduce([], 0, add), 0)
		'reduce list' |> t.eq(reduce(arr, 0, add), 20)
		'reduce callback gets index' |> t.eq(
			{
				nums := []
				reduce(arr, 0, fn(_, _, i) {
					nums << i
					0
				})
				nums
			}
			[0, 1, 2, 3, 4]
		)

		'flatten empty list' |> t.eq(flatten([]), [])
		'flatten list' |> t.eq(flatten([arr, arr]), [1, 2, 3, 4, 10, 1, 2, 3, 4, 10])
		'flatten only flattens 1 depth' |> t.eq(
			flatten([[1, 2], [[3, 4], [5, 6]]])
			[1, 2, [3, 4], [5, 6]]
		)

		'some empty list' |> t.eq(some([]), false)
		'some list' |> t.eq(some([true, false]), true)
		'some empty list w/ pred' |> t.eq(some([], even?), false)
		'some list w/ pred' |> t.eq(some([1, 3, 5], even?), false)
		'some list w/ pred' |> t.eq(some(arr, even?), true)
		'some string -> true' |> t.eq(some('xxXxxi', isX?), true)
		'some string -> false' |> t.eq(some('iiiiiiaa', isX?), false)

		'every empty list' |> t.eq(every([]), true)
		'every list' |> t.eq(every([true, false]), false)
		'every empty list w/ pred' |> t.eq(every([], even?), true)
		'every list w/ pred' |> t.eq(every(arr, even?), false)
		'every list w/ pred' |> t.eq(every(arr |> filter(even?), even?), true)
		'every string' |> t.eq(every('xxXxx', isX?), true)
		'every string' |> t.eq(every('xxXxxi', isX?), false)

		'zip empty lists' |> t.eq(zip([], []), [])
		'zip lists of same length' |> t.eq(zip([1, 2, 3], [4, 5, 6]), [[1, 4], [2, 5], [3, 6]])
		'zip where len(xs) < len(ys)' |> t.eq(zip([1, 2], [10, 11, 12, 13]), [[1, 10], [2, 11]])
		'zip where len(xs) > len(ys)' |> t.eq(zip([1, 2, 3, 4], [10, 11, 12]), [[1, 10], [2, 11], [3, 12]])
		'zip list with itself' |> t.eq(
			{
				list := [:a, :b, :c, :d]
				zip(list, list)
			}
			[[:a, :a], [:b, :b], [:c, :c], [:d, :d]]
		)
		'zip empty lists w/ pred' |> t.eq(zip([], [], add), [])
		'zip lists of same length w/ pred' |> t.eq(zip([1, 2, 3], [4, 5, 6], add), [5, 7, 9])
		'zip where len(xs) < len(ys) w/ pred' |> t.eq(zip([1, 2], [10, 11, 12, 13], add), [11, 13])
		'zip where len(xs) > len(ys) w/ pred' |> t.eq(zip([1, 2, 3, 4], [10, 11, 12], add), [11, 13, 15])

		'partition empty list' |> t.eq(partition([], 3), [])
		'partition list evenly' |> t.eq(partition(std.range(10), 2), [[0, 1], [2, 3], [4, 5], [6, 7], [8, 9]])
		'partition list non-evenly' |> t.eq(partition(std.range(10), 3), [[0, 1, 2], [3, 4, 5], [6, 7, 8], [9]])
		'partition by 1' |> t.eq(partition(std.range(4), 1), [[0], [1], [2], [3]])
		'partition by count > len(xs)' |> t.eq(partition(std.range(5), 10), [[0, 1, 2, 3, 4]])

		'partition empty list w/ pred' |> t.eq(partition([], even?), [])
		'partition list w/ pred' |> t.eq(partition([1, 1, 2, 2, 2, 3, 4, 4], even?), [[1, 1], [2, 2, 2], [3], [4, 4]])

		'uniq empty list' |> t.eq(uniq([]), [])
		'uniq list of 1' |> t.eq(uniq([:a]), [:a])
		'uniq list of unique numbers' |> t.eq(uniq([1, 2, 4, 8, 10]), [1, 2, 4, 8, 10])
		'uniq list of non-unique numbers' |> t.eq(uniq([1, 2, 4, 2, 10, 8, 10]), [1, 2, 4, 2, 10, 8, 10])
		'uniq list of consecutive numbers' |> t.eq(uniq([1, 4, 2, 2, 8, 8, 10]), [1, 4, 2, 8, 10])
		'uniq list of non-consecutive numbers' |> t.eq(uniq([1, 3, 3, 4, 4, 4, 1, 3]), [1, 3, 4, 1, 3])
		'uniq list of composite types' |> t.eq(
			uniq([[1, 2], [2, 4], [1, 2], [1, 2], [1, 3]])
			[[1, 2], [2, 4], [1, 2], [1, 3]]
		)
		'uniq by predicate' |> t.eq(
			uniq(
				[{ name: 'Linus' }, { name: 'Jan' }, { name: 'Al' }, { name: 'Al' }, { name: 'Linus' }]
				fn(o) o.name
			)
			[{ name: 'Linus' }, { name: 'Jan' }, { name: 'Al' }, { name: 'Linus' }]
		)
	}

	// find, indexOf, and contains?
	{
		{
			find: find
			indexOf: indexOf
			contains?: contains?
		} := std

		fn even?(n) n % 2 = 0

		'find empty list' |> t.eq(find([], even?), -1)
		'find nonexistent item' |> t.eq(find([1, 3, 5], even?), -1)
		'find existent item' |> t.eq(find([1, 5, 6, 7], even?), 2)
		'find duplicate item' |> t.eq(find([9, 11, 12, 13, 14], even?), 2)

		'indexOf empty list' |> t.eq(indexOf([], :a), -1)
		'indexOf nonexistent item' |> t.eq(indexOf([:a, :b, :c], :x), -1)
		'indexOf existent item' |> t.eq(indexOf([:a, :b, :c], :b), 1)
		'indexOf duplicate item' |> t.eq(indexOf([:a, :b, :c, :d, :c], :c), 2)

		'contains? empty list' |> t.eq(contains?([], :a), false)
		'contains? nonexistent item' |> t.eq(contains?([:a, :b, :c], :x), false)
		'contains? existent item' |> t.eq(contains?([:a, :b, :c], :b), true)
		'contains? duplicate item' |> t.eq(contains?([:a, :b, :c, :d, :c], :c), true)
	}

	// object operators: values, entries, merge
	{
		{
			values: values
			entries: entries
			merge: merge
		} := std

		'values of empty obj' |> t.eq(values({}), [])
		'values of obj' |> t.eq(
			{ a: :ay, b: 2, c: [1, 2] } |>
				values() |>
				with std.every() fn(x) [:ay, 2, [1, 2]] |> std.contains?(x)
			true
		)
		'values of empty list' |> t.eq(values([]), [])
		'values of list' |> t.eq(
			std.range(10) |>
				values() |>
				with std.every() fn(x) std.range(10) |> std.contains?(x)
			true
		)

		'entries of empty obj' |> t.eq(entries({}), [])
		'entries of obj' |> t.eq(
			{ a: :ay, b: 2, c: [1, 2] } |>
				entries() |>
				with std.every() fn(x) [['a', :ay], ['b', 2], ['c', [1, 2]]] |> std.contains?(x)
			true
		)
		'entries of empty list' |> t.eq(entries([]), [])
		'entries of list' |> t.eq(
			std.range(10) |>
				entries() |>
				with std.every() fn(x) std.range(10) |> std.map(fn(n) [n, n]) |> std.contains?(x)
			true
		)

		'merge no objects' |> t.eq(merge(), ?)
		'merge 1 object' |> t.eq(
			merge({ a: '10', b: '20' })
			{ a: '10', b: '20' }
		)
		'merge 2 objects' |> t.eq(
			merge(
				{ a: '10', b: '20' }
				{ a: '100', c: '200' }
			)
			{ a: '100', b: '20', c: '200' }
		)
		'merge N objects' |> t.eq(
			merge(
				std.range(10) |>
					std.map(fn(i) {(i):string(i) + 'val' })...
			)
			{
				0: '0val'
				1: '1val'
				2: '2val'
				3: '3val'
				4: '4val'
				5: '5val'
				6: '6val'
				7: '7val'
				8: '8val'
				9: '9val'
			}
		)
		oo := { a: '100', b: '200', c: '300' }
		'merge mutates first object' |> t.eq(
			{
				oo |> merge({ 10: 'ten', 100: :hundred })
				oo
			}
			{
				a: '100', b: '200', c: '300'
				10: 'ten', 100: :hundred
			}
		)
	}

	// control flow constructs
	{
		{
			once: once
			loop: loop
		} := std

		'once called nonce with args' |> t.eq(
			{
				n := 0
				f := once(fn(m) n <- m)
				n
			}
			0
		)
		'once called once with args' |> t.eq(
			{
				n := 0
				f := once(fn(m) n <- m)
				f(10)
				n
			}
			10
		)
		'once called N times with args' |> t.eq(
			{
				n := 0
				f := once(fn(m) n <- m)
				f(10)
				f(20)
				f(40)
				f(80)
				n
			}
			10
		)

		'loop with 0 count' |> t.eq(
			{
				iterations := 0
				with loop(0) fn {
					iterations <- iterations + 1
				}
				iterations
			}
			0
		)
		'loop with finite count' |> t.eq(
			{
				iterations := 0
				with loop(12) fn {
					iterations <- iterations + 1
				}
				iterations
			}
			12
		)
		'loop with negative (infinite) count and breaker' |> t.eq(
			{
				iterations := 0
				with loop(-1) fn(count, break) if count {
					200 -> break()
					_ -> iterations <- iterations + 1
				}
				iterations
			}
			200
		)
		'loop with no (infinite) count and breaker' |> t.eq(
			{
				iterations := 0
				with loop() fn(count, break) if count {
					200 -> break()
					_ -> iterations <- iterations + 1
				}
				iterations
			}
			200
		)
	}
}

