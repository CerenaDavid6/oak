// exercising list iterator functions

{
	println: println

	range: range
	slice: slice
	reverse: reverse
	map: map
	each: each
	filter: filter
	reduce: reduce
} := import('std')

{
	printf: printf
} := import('fmt')

nums := range(1, 11)

// slice
printf('slice: {{ 0 }}', nums |> slice(3, 7))

// reverse
printf('reverse: {{ 0 }}', nums |> reverse())

// map
printf('map: {{ 0 }}', nums |> map(fn(n) n * n))

// each
println('each:')
nums |> each(fn(n) println(n))

// filter
printf('filter: {{ 0 }}', nums |> filter(fn even?(n) n % 2 = 0))

// reduce (sum)
sum := fn(xs) xs |> reduce(0, fn(a, b) a + b)
printf('reduce (sum): {{ 0 }}', sum(nums))

