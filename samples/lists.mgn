// exercising list iterator functions

{
    println: println

    range: range
    slice: slice
    reverse: reverse
    map: map
    each: each
    filter: filter
    reduce: reduce
} := import('../lib/std')

nums := range(1, 11)

// slice
println('slice:', nums |> slice(3, 7))

// reverse
println('reverse:', nums |> reverse())

// map
println('map:', nums |> map(fn(n) n * n))

// each
println('each:')
nums |> each(fn(n) println(n))

// filter
println('filter:', nums |> filter(fn even?(n) n % 2 = 0))

// reduce (sum)
sum := fn(xs) xs |> reduce(0, fn(a, b) a + b)
println('reduce (sum):', sum(nums))

