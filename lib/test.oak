// unit testing library

{
	each: each
	filter: filter
	println: println
} := import('std')

{
	printf: printf
} := import('fmt')

fn new(title) {
	Tests := []
	Skipped := []

	fn red(s) '[0;31m' + s + '[0;0m'
	fn green(s) '[0;32m' + s + '[0;0m'

	fn reportTests(tests) {
		tests |> each(fn(test) {
			{
				name: name
				passed?: p?
				result: result
				expect: expect
			} := test

			printf(
				'  {{ 0 }} {{ 1 }}'
				if p? {
					true -> green('âœ”')
					_ -> red('âœ˜')
				}
				name
			)

			if p? {
				false -> {
					printf('	expected: {{ 0 }}', expect)
					printf('	  result: {{ 0 }}', result)
				}
			}
		})
	}

	fn reportAggregate {
		failedTests := Tests |> filter(fn(t) !t.passed?)
		if len(failedTests) {
			0 -> printf('All {{ 0 }} tests passed.', len(Tests))
			_ -> printf('{{ 0 }} / {{ 1 }} tests passed.', len(Tests) - len(failedTests), len(Tests))
		}
		if skipped := len(Skipped) {
			0 -> ?
			_ -> printf('{{ 0 }} tests skipped.', skipped)
		}
	}

	{
		eq: fn(name, result, expect) Tests << {
			name: name
			passed?: result = expect
			result: result
			expect: expect
		}
		skip: fn(name, result, expect) Skipped << {
			name: name
		}
		reportFailed: fn {
			if failedTests := Tests |> filter(fn(t) !t.passed?) {
				[] -> ?
				_ -> {
					printf('Failed {{ 0 }} tests:', title)
					failedTests |> reportTests()
				}
			}
			reportAggregate()
		}
		report: fn {
			printf('{{ 0 }} tests:', title)
			Tests |> reportTests()
			reportAggregate()
		}
		exit: fn {
			exit(if Tests |> filter(fn(t) !t.passed?) {
				[] -> 0
				_ -> 1
			})
		}
	}
}

