// core standard library

fn println(x) print(string(x) + '\n')

// functional iterators

fn push(xs, x) xs.(len(xs)) := x

fn baseIterator(v) if type(v) {
    :string -> ''
    :list -> []
    :object -> {}
}

fn map(xs, f) {
    fn sub(acc, i) if i {
        len(xs) -> acc
        _ -> sub(
            push(acc, f(xs.(i), i))
            i + 1
        )
    }
    sub(baseIterator(xs), 0)
}

fn each(xs, f) {
    fn sub(i) if i {
        len(xs) -> ?
        _ -> {
            f(xs.(i), i)
            sub(i + 1)
        }
    }
    sub(0)
}

fn filter(xs, f) {
    fn sub(acc, i) if i {
        len(xs) -> acc
        _ -> {
            if x := f(xs.(i), i) {
                true -> push(acc, x)
            }
            sub(acc, i + 1)
        }
    }
    sub(baseIterator(xs), 0)
}

fn reduce(xs, f) {
    // TODO: write reducer
}

