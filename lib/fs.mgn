// filesystems library
// offers useful utility wrappers around the built-in filesystem functions

ReadBufSize := 4096 // 4k read buffer

fn readFileSync(path) {
	evt := open(path)
	if evt.type {
		:error -> ?
		_ -> {
			fd := evt.fd
			fn sub(file, offset) {
				evt := read(fd, offset, ReadBufSize)
				if evt.type {
					:error -> {
						close(fd)
						?
					}
					_ -> if len(evt.data) {
						ReadBufSize -> sub(
							file.(len(file)) := evt.data
							offset + ReadBufSize
						)
						_ -> {
							close(fd)
							file.(len(file)) := evt.data
						}
					}
				}
			}

			sub('', 0)
		}
	}
}

fn readFileAsync(path, withFile) with open(path) fn(evt) if evt.type {
	:error -> withFile(?)
	_ -> {
		fd := evt.fd

		fn sub(file, offset) with read(fd, offset, ReadBufSize) fn(evt) if evt.type {
			:error -> with close(fd) fn {
				withFile(?)
			}
			_ -> if len(evt.data) {
				ReadBufSize -> sub(
					file.(len(file)) := evt.data
					offset + ReadBufSize
				)
				_ -> with close(fd) fn {
					withFile(file.(len(file)) := evt.data)
				}
			}
		}

		sub('', 0)
	}
}

fn readFile(path, withFile) if withFile {
	? -> readFileSync(path)
	_ -> readFileAsync(path, withFile)
}

fn writeFileSync(path, file) {
	evt := open(path, :truncate)
	if evt.type {
		:error -> ?
		_ -> {
			fd := evt.fd
			{
				evt := write(fd, 0, file)
				close(fd)
				if evt.type {
					:error -> ?
					_ -> true
				}
			}
		}
	}
}

fn writeFileAsync(path, file, withEnd) with open(path, :truncate) fn(evt) if evt.type {
	:error -> withEnd(?)
	_ -> with write(fd := evt.fd, 0, file) fn(evt) if evt.type {
		:error -> with close(fd) fn {
			withEnd(?)
		}
		_ -> with close(fd) fn {
			withEnd(true)
		}
	}
}

fn writeFile(path, file, withEnd) if withEnd {
	? -> writeFileSync(path, file)
	_ -> writeFileAsync(path, file, withEnd)
}

