// filesystems library
// offers useful utility wrappers around the built-in filesystem functions

{
	println: println
} := import('std')

ReadBufSize := 4096 * 4 // 16k read buffer

// TODO: fopen flags
Flag := {
	Create: 0
	Read: 0
	Write: 0
	Trunc: 0
}

fn readFile(path, withFile) with open(path) fn(evt) if evt.type {
	:error -> withFile(?)
	_ -> {
		// TODO: buffered read
		close(evt.fd)
		withFile('')
	}
}

// TODO: open with O_TRUNC flag set
fn writeFile(path, data, withResult) with open(path) fn(evt) if evt.type {
	:error -> withResult(false)
	_ -> with write(evt.fd, 0, data) fn(evt) {
		close(evt.fd)
		withResult(evt.type != :error)
	}
}

