// core standard library

fn identity(x) x

fn baseIterator(v) if type(v) {
	:string -> ''
	:list -> []
	:object -> {}
}

fn default(x, base) if x {
	? -> base
	_ -> x
}

_nToH := '0123456789abcdef'
fn toHex(n) {
	fn sub(p, acc) if p < 16 {
		true -> _nToH.(p) + acc
		_ -> int(p / 16) |> sub(_nToH.(p % 16) + acc)
	}
	sub(int(n), '')
}

_hToN := {
	0: 0
	1: 1
	2: 2
	3: 3
	4: 4
	5: 5
	6: 6
	7: 7
	8: 8
	9: 9
	a: 10
	b: 11
	c: 12
	d: 13
	e: 14
	f: 15
}
fn fromHex(s) {
	fn sub(i, acc) if i {
		len(s) -> acc
		_ -> sub(i + 1, acc * 16 + _hToN.(s.(i)))
	}
	sub(0, 0)
}

fn clamp(min, max, n, m) {
	// assumes that at least min < max & n < m
	n := if n < min {
		true -> min
		_ -> n
	}
	m := if m < min {
		true -> min
		_ -> m
	}

	m := if m > max {
		true -> max
		_ -> m
	}
	n := if n > m {
		true -> m
		_ -> n
	}

	[n, m]
}

fn slice(xs, min, max) {
	min := default(min, 0)
	max := default(max, len(xs))
	[min, max] := clamp(0, len(xs), min, max)

	fn sub(acc, i) if i {
		max -> acc
		_ -> sub(
			acc << xs.(i)
			i + 1
		)
	}
	sub(baseIterator(xs), min)
}

fn clone(x) if type(x) {
	:string -> '' + x
	:list -> slice(x)
	:object -> keys(x) |> reduce({}, fn(acc, key) acc.(key) := x.(key))
	_ -> x
}

fn append(xs, ys) {
	xlen := len(xs)
	ys |> each(fn(y, i) xs.(xlen + i) := y)
	xs
}

fn join(xs, ys) clone(xs) |> append(ys)

// functional iterators

fn range(start, end, step) {
	step := default(step, 1)
	if end {
		? -> [start, end] <- [0, start]
	}

	if step = 0 {
		true -> []
		_ -> {
			list := []

			sub := if step > 0 {
				true -> fn(n) if n < end {
					true -> {
						list << n
				   		sub(n + step)
					}
					_ -> list
				}
				_ -> fn(n) if n > end {
					true -> {
						list << n
				   		sub(n + step)
					}
					_ -> list
				}
			}
			sub(start)
		}
	}
}

fn reverse(xs) {
	fn sub(acc, i) if i < 0 {
		true -> acc
		_ -> sub(
			acc << xs.(i)
			i - 1
		)
	}
	sub([], len(xs) - 1)
}

fn map(xs, f) {
	fn sub(acc, i) if i {
		len(xs) -> acc
		_ -> sub(
			acc << f(xs.(i), i)
			i + 1
		)
	}
	sub(baseIterator(xs), 0)
}

fn each(xs, f) {
	fn sub(i) if i {
		len(xs) -> ?
		_ -> {
			f(xs.(i), i)
			sub(i + 1)
		}
	}
	sub(0)
}

fn filter(xs, f) {
	fn sub(acc, i) if i {
		len(xs) -> acc
		_ -> {
			if f(x := xs.(i), i) {
				true -> acc << x
			}
			sub(acc, i + 1)
		}
	}
	sub(baseIterator(xs), 0)
}

fn reduce(xs, seed, f) {
	fn sub(acc, i) if i {
		len(xs) -> acc
		_ -> sub(
			f(acc, xs.(i), i)
			i + 1
		)
	}
	sub(seed, 0)
}

fn flatten(xs) xs |> reduce([], append)

fn some(xs, pred) {
	pred := default(pred, identity)
	xs |> reduce(false, fn(acc, x) acc | pred(x))
}

fn every(xs, pred) {
	pred := default(pred, identity)
	xs |> reduce(true, fn(acc, x) acc & pred(x))
}

fn zip(xs, ys, zipper) {
	zipper := default(zipper, fn(x, y) [x, y])
	max := if len(xs) < len(ys) {
		true -> len(xs)
		_ -> len(ys)
	}
	fn sub(acc, i) if i {
		max -> acc
		_ -> sub(
			acc << zipper(xs.(i), ys.(i))
			i + 1
		)
	}
	sub([], 0)
}

fn partition(xs, by) if type(by) {
	:int -> xs |> reduce([], fn(acc, x, i) if i % by {
		0 -> acc << [x]
		_ -> {
			acc.(len(acc) - 1) << x
			acc
		}
	})
	:function -> {
		last := fn {} // a clever trick ;) -- fn {} is not equal to anything but itself
		xs |> reduce([], fn(acc, x) {
			if this := by(x) {
				last -> acc.(len(acc) - 1) << x
				_ -> acc << [x]
			}
			last <- this
			acc
		})
	}
}

fn find(xs, pred) {
	fn sub(i) if i {
		len(xs) -> -1
		_ -> if pred(xs.(i)) {
			true -> i
			_ -> sub(i + 1)
		}
	}
	sub(0)
}

fn indexOf(xs, x) {
	fn sub(i) if i {
		len(xs) -> -1
		_ -> if xs.(i) {
			x -> i
			_ -> sub(i + 1)
		}
	}
	sub(0)
}

fn contains?(xs, x) indexOf(xs, x) > -1

// loop takes a loop count `max` and a callback, and invokes the callback `max`
// times. Can be used to infinitely loop if N < 0. Callback is passed in two
// arguments:
// 1. count, the current loop count
// 2. breaker, a fn to be called to exit early from the loop
fn loop(max, f) {
	max := default(max, -1)
	broken := false
	fn breaker broken <- true
	fn sub(count) if count {
		max -> ?
		_ -> if broken {
			true -> ?
			_ ->  {
				f(count, breaker)
				sub(count + 1)
			}
		}
	}
	sub(0)
}

// OS interfaces

fn println(xs...) {
	xs |> each(fn(x, i) if i {
		0 -> print(string(x))
		_ -> print(' ' + string(x))
	})
	print('\n')
}

