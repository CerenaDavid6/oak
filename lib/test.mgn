// unit testing library

{
	push: push
	each: each
	filter: filter
	println: println
} := import('std')

{
	printf: printf
} := import('fmt')

fn new(title) {
	Tests := []

	fn red(s) '[0;31m' + s + '[0;0m'
	fn green(s) '[0;32m' + s + '[0;0m'

	fn reportTests(tests) {
		tests |> each(fn(test) {
			{
				name: name
				succeeded?: s?
				result: result
				expect: expect
			} := test

			printf(
				'  {{ 0 }} {{ 1 }}'
				if s? {
					true -> green('âœ”')
					_ -> red('âœ˜')
				}
				name
			)

			if s? {
				false -> {
					printf('    expected: {{ 0 }}', expect)
					printf('      result: {{ 0 }}', result)
				}
			}
		})
	}

    fn reportAggregate {
		failedTests := Tests |> filter(fn (t) !(t.succeeded?))
	    if len(failedTests) {
			0 -> println('All tests passed.')
			_ -> printf('{{ 0 }} / {{ 1 }} tests passed.', len(Tests) - len(failedTests), len(Tests))
	    }
    }

    {
		eq: fn(name, result, expect) Tests |> push({
			name: name
			succeeded?: result = expect
			result: result
			expect: expect
		})
		failed: fn {
			printf('Failed {{ 0 }} tests:', title)
			Tests |> filter(fn (t) !(t.succeeded?)) |> reportTests()
			reportAggregate()
		}
		report: fn {
			printf('{{ 0 }} tests:', title)
			Tests |> reportTests()
			reportAggregate()
		}
    }
}

